<?php
/**
 * This source file is proprietary and part of Rethings.
 *
 * (c) Rethings Inc.
 *
 * @see https://www.rethings.io
 */

declare(strict_types=1);

namespace Tests\Feature\Domains\Device;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Testing\TestResponse;
use Rethings\Domains\App\App;
use Tests\AssertRethingsResource;
use Tests\Concerns\HasJWT;
use Tests\Concerns\WithDataset;
use Tests\RethingsDataSamples;
use Tests\TestCase;

class RegisterDeviceTest extends TestCase
{
    use RefreshDatabase, HasJWT, WithDataset, AssertRethingsResource, RethingsDataSamples;

    public const ROUTE_NAME = 'devices.store';

    public function createDataset(): array
    {
        return [
            App::class => [
                self::createAppSample(),
            ],
        ];
    }

    public function testWithAutoGeneratedIdRequest(): void
    {
        /** @var TestResponse $response */
        $response = self::postJson(route(static::ROUTE_NAME), [
            'name' => 'Test Device',
            'metadata' => ['foo' => 'bar'],
            'tags' => ['sample'],
        ], self::getConsumerAuthHeaders('consumer-01', 'app_01'));
        $response->assertCreated();

        self::assertDeviceResource($response);
    }

    public function testWithProvidedId(): void
    {
        /** @var TestResponse $response */
        $response = self::postJson(route(static::ROUTE_NAME, ['device_01']), [
            'name' => 'Test Device',
            'metadata' => ['foo' => 'bar'],
            'tags' => ['sample'],
        ], self::getConsumerAuthHeaders('consumer-01', 'app_01'));
        $response->assertCreated();

        self::assertDeviceResource($response, 'device_01');
    }

    public function testWithProvidedIdThatAlreadyExists(): void
    {
        $this->testWithProvidedId();

        /** @var TestResponse $response */
        $response = self::postJson(route(static::ROUTE_NAME, ['device_01']), [
            'name' => 'Test Device',
            'metadata' => ['foo' => 'bar'],
            'tags' => ['sample'],
        ], self::getConsumerAuthHeaders('consumer-01', 'app_01'));
        $response->assertStatus(422);
        $response->assertJsonValidationErrors([
            'id',
        ]);
    }
}
